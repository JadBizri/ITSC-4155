// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Item {
    id           Int       @id @default(autoincrement())
    title        String
    slug         String    @unique
    category     Category
    price        Float
    description  String
    images       String[]
    location     Location
    condition    Condition
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    visits       Int       @default(0)
    UniqueVisits Int       @default(0)
    Active       Boolean   @default(true)

    createdBy   User       @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String
    Comments    Comments[]
    offers      Offer[]

    @@index([title])
}

model Comments {
    id        Int      @id @default(autoincrement())
    text      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String
    item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId    Int
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    phone         String?    @unique
    phoneVerified DateTime?
    accounts      Account[]
    sessions      Session[]
    items         Item[]
    Comments      Comments[]
    offers        Offer[]
}

model Offer {
    id      Int    @id @default(autoincrement())
    price   Float
    buyerId String
    itemId  Int
    status  Status @default(PENDING)
    item    Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
    buyer   User   @relation(fields: [buyerId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Category {
    TEXTBOOKS
    ELECTRONICS
    CLOTHING
    ESSENTIALS
    FURNITURE
    OTHER
}

enum Condition {
    NEW
    LIKE_NEW
    GOOD
    FAIR
    POOR
}

enum Status {
    PENDING
    ACCEPTED
    REJECTED
}

enum Location {
    STUDENT_UNION
    ATKINS_LIBRARY
    WOODWARD
    UREC
    CONE_BUILDING
    STAR_QUAD
    BELK_HALL
    ELM_HALL
    GREEK_VILLAGE
    HAWTHORN_HALL
    HICKORY_CEDAR_HALL
    HOLSHOUSER_HALL
    HUNT_HALL
    LAUREL_HALL
    LEVINE_HALL
    LYNCH_HALL
    MARTIN_HALL
    MILTIMORE_HALL
    OAK_HALL
    PINE_HALL
    SANFORD_HALL
    SCOTT_HALL
    WALLIS_HALL
    WILSON_HALL
    WITHERSPOON_HALL
}
